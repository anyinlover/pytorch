diff --git a/test/dynamo/cpython/3_13/test_operator.py b/test/dynamo/cpython/3_13/test_operator.py
index d90f820052c..11efc0206d4 100644
--- a/test/dynamo/cpython/3_13/test_operator.py
+++ b/test/dynamo/cpython/3_13/test_operator.py
@@ -1,3 +1,20 @@
+# ======= BEGIN Dynamo patch =======
+# Owner(s): ["module: dynamo"]
+
+# ruff: noqa
+# flake8: noqa
+
+import sys
+import torch
+import torch._dynamo.test_case
+import unittest
+from torch._dynamo.test_case import CPythonTestCase
+from torch.testing._internal.common_utils import run_tests
+
+__TestCase = CPythonTestCase
+
+# ======= END DYNAMO PATCH =======
+
 import unittest
 import inspect
 import pickle
@@ -628,11 +645,11 @@ class OperatorTestCase:
         self.assertEqual(str(sig), '(obj, /)')
 
 
-class PyOperatorTestCase(OperatorTestCase, unittest.TestCase):
+class PyOperatorTestCase(OperatorTestCase, __TestCase):
     module = py_operator
 
 @unittest.skipUnless(c_operator, 'requires _operator')
-class COperatorTestCase(OperatorTestCase, unittest.TestCase):
+class COperatorTestCase(OperatorTestCase, __TestCase):
     module = c_operator
 
 
@@ -717,25 +734,25 @@ class OperatorPickleTestCase:
                 # Can't test repr consistently with multiple keyword args
                 self.assertEqual(f2(a), f(a))
 
-class PyPyOperatorPickleTestCase(OperatorPickleTestCase, unittest.TestCase):
+class PyPyOperatorPickleTestCase(OperatorPickleTestCase, __TestCase):
     module = py_operator
     module2 = py_operator
 
 @unittest.skipUnless(c_operator, 'requires _operator')
-class PyCOperatorPickleTestCase(OperatorPickleTestCase, unittest.TestCase):
+class PyCOperatorPickleTestCase(OperatorPickleTestCase, __TestCase):
     module = py_operator
     module2 = c_operator
 
 @unittest.skipUnless(c_operator, 'requires _operator')
-class CPyOperatorPickleTestCase(OperatorPickleTestCase, unittest.TestCase):
+class CPyOperatorPickleTestCase(OperatorPickleTestCase, __TestCase):
     module = c_operator
     module2 = py_operator
 
 @unittest.skipUnless(c_operator, 'requires _operator')
-class CCOperatorPickleTestCase(OperatorPickleTestCase, unittest.TestCase):
+class CCOperatorPickleTestCase(OperatorPickleTestCase, __TestCase):
     module = c_operator
     module2 = c_operator
 
 
 if __name__ == "__main__":
-    unittest.main()
+    run_tests()
